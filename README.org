#+TITLE: A 4bit CPU for print times table

In c, we prints the times table by following code:

#+BEGIN_SRC c
  #include <stdio.h>

  int main(int argc, char *argv[])
  {

          for (int i = 1; i < 10; i++) {
                  for (int j = 1; j < 10; j++) {
                          printf("%d x %d = %d\n", i, j, i * j);
                  }
                  printf("\n");
          }

          return 0;
  }
#+END_SRC

How do you implement a 4bit CPU for calculate times table ?


** Registers

| Register | Description             |
|----------+-------------------------|
| R0       | tmp data                |
| R1       | tmp data                |
| R2       | store ALU result (High) |
| R3       | store ALU result (Low)  |
| PC_H     | Program Counter (High)  |
| PC_L     | Program Counter (Low)   |
| Z        | Zero flag               |

** Instructions

| cmd | nibble | ASM               | Description                                     |
|-----+--------+-------------------+-------------------------------------------------|
|   0 |      1 | exit              | Exit application                                |
|   1 |      1 | print             | print("%d x %d = %d\n", r0, r1, (r2 << 4) | r3) |
|   2 |      2 | inc <Rx>          | Rx += 1                                         |
|   3 |      3 | mul <Rx> <Rx>     | Calculate Rx x Rx, store result to R2 and R3    |
|   4 |      3 | mov <Rx> <val>    | Rx = val                                        |
|   5 |      3 | cmp <Rx> <val>    | Compare Rx and val, set Z = 1 if rx >= val      |
|   6 |      3 | blt <PC_H> <PC_L> | Jump to address if Z = 1, clear flag after done |

** Assembly

#+BEGIN_SRC asm
  _init:
    mov r0 1    ; i = 1

  _for_i:
    mov r1 1    ; j = 1

  _for_j:
    mul r0 r1   ; i * j
    print       ; print("R1 x R2 = Result")
    inc r1      ; j++
    cmp r1 10   ; if (j < 10)
    blt _for_j  ;  goto _for_j

    inc r0      ; i++
    cmp r0 10   ; if (i < 10)
    blt _for_i  ;  goto _for_i

    exit        ; Exit application
#+END_SRC